import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class CSVToXLSXConverter {

    // ... (existing code)

    public static void writeXLSXFile(String xlsxFilePath, List<String[]> data) {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Sheet1");
            int rowCount = 0;

            // Get the first row to determine the column types
            String[] firstRowData = data.get(0);
            boolean[] isDateColumn = new boolean[firstRowData.length];

            // Determine which columns are of date type
            for (int i = 0; i < firstRowData.length; i++) {
                isDateColumn[i] = isDate(firstRowData[i]);
            }

            CreationHelper createHelper = workbook.getCreationHelper();

            for (String[] rowData : data) {
                Row row = sheet.createRow(rowCount++);
                int columnCount = 0;
                for (String cellData : rowData) {
                    Cell cell = row.createCell(columnCount++);

                    // If the column is of date type, set the cell format accordingly
                    if (isDateColumn[columnCount - 1]) {
                        CellStyle dateCellStyle = workbook.createCellStyle();
                        dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("m/d/yyyy h:mm"));
                        cell.setCellValue(parseDate(cellData));
                        cell.setCellStyle(dateCellStyle);
                    } else {
                        cell.setCellValue(cellData);
                    }
                }
            }

            try (FileOutputStream outputStream = new FileOutputStream(xlsxFilePath)) {
                workbook.write(outputStream);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to check if a string represents a date
    private static boolean isDate(String strDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("m/d/yyyy h:mm");
        try {
            dateFormat.parse(strDate);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    // Helper method to parse a string date into a Date object
    private static Date parseDate(String strDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("m/d/yyyy h:mm");
        try {
            return dateFormat.parse(strDate);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }
}



import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class CSVToXLSXConverter {

    // ... (existing code)

    public static void writeXLSXFile(String xlsxFilePath, List<String[]> data) {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Sheet1");
            int rowCount = 0;

            // Get the first row to determine the column types
            String[] firstRowData = data.get(0);
            boolean[] isDateColumn = new boolean[firstRowData.length];

            // Determine which columns are of date type
            for (int i = 0; i < firstRowData.length; i++) {
                isDateColumn[i] = isDate(firstRowData[i]);
            }

            CreationHelper createHelper = workbook.getCreationHelper();

            for (String[] rowData : data) {
                Row row = sheet.createRow(rowCount++);
                int columnCount = 0;
                for (String cellData : rowData) {
                    Cell cell = row.createCell(columnCount++);

                    // If the column is of date type, set the cell format accordingly
                    if (isDateColumn[columnCount - 1]) {
                        CellStyle dateCellStyle = workbook.createCellStyle();
                        dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("yyyy-MM-dd")); // Adjust the format as per your date format in the CSV
                        cell.setCellValue(parseDate(cellData));
                        cell.setCellStyle(dateCellStyle);
                    } else {
                        cell.setCellValue(cellData);
                    }
                }
            }

            try (FileOutputStream outputStream = new FileOutputStream(xlsxFilePath)) {
                workbook.write(outputStream);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to check if a string represents a date
    private static boolean isDate(String strDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Adjust the format as per your date format in the CSV
        try {
            dateFormat.parse(strDate);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // Helper method to parse a string date into a Date object
    private static Date parseDate(String strDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Adjust the format as per your date format in the CSV
        try {
            return dateFormat.parse(strDate);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}







import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CsvToXlsxConverter {
    public static void main(String[] args) {
        String csvFilePath = "path/to/input.csv";
        String xlsxFilePath = "path/to/output.xlsx";

        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Sheet1");
            String line;

            // Set the custom date format for the cells
            DataFormat dataFormat = workbook.createDataFormat();
            short dateFormat = dataFormat.getFormat("m/d/yyyy h:mm");
            CellStyle dateCellStyle = workbook.createCellStyle();
            dateCellStyle.setDataFormat(dateFormat);

            int rowNum = 0;
            while ((line = br.readLine()) != null) {
                Row row = sheet.createRow(rowNum);
                String[] values = line.split(",");

                for (int i = 0; i < values.length; i++) {
                    Cell cell = row.createCell(i);

                    // Check if the value is a date in the custom format
                    String value = values[i];
                    try {
                        Date date = new SimpleDateFormat("M/d/yyyy h:mm").parse(value);
                        cell.setCellValue(date);
                        cell.setCellStyle(dateCellStyle); // Apply the custom date format
                    } catch (ParseException e) {
                        cell.setCellValue(value);
                    }
                }

                rowNum++;
            }

            try (FileOutputStream fos = new FileOutputStream(xlsxFilePath)) {
                workbook.write(fos);
            }

            System.out.println("Conversion complete.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



import io.cucumber.core.cli.Main;

public class CucumberRunner {

    public static void main(String[] args) {
        String[] argv = {
            "--glue", "your.step.definitions.package",
            "src/test/resources/sample.feature"
        };
        byte exitStatus = Main.run(argv, Thread.currentThread().getContextClassLoader());
        System.exit(exitStatus);
    }
}



<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd">
    <id>jar-with-tests</id>
    <formats>
        <format>jar</format>
    </formats>
    <includeBaseDirectory>false</includeBaseDirectory>
    <fileSets>
        <fileSet>
            <directory>${project.build.outputDirectory}</directory>
            <outputDirectory>/</outputDirectory>
        </fileSet>
        <fileSet>
            <directory>${project.build.testOutputDirectory}</directory>
            <outputDirectory>/</outputDirectory>
        </fileSet>
    </fileSets>
</assembly>


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.util.AreaReference;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFPivotTable;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        String sourceDataRef = sheet.getSheetName() + "!$A$1:$E$" + (lastRowIndex + 1);

        Sheet pivotSheet = workbook.createSheet("Pivot");
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(new AreaReference(sourceDataRef), new CellReference("A1"), sheet);

        // Set the pivot table fields
        int categoryColumnIndex = 4; // Modify as per your actual column index

        // Add the "Category" column as row label
        int categoryFieldIndex = pivotTable.addRowLabel(categoryColumnIndex);

        // Set the aggregation function for the "Category" column using formulas
        String countFormula = "COUNTIF(" + sheet.getSheetName() + "!$E$2:$E$" + (lastRowIndex + 1) + ", " + sheet.getSheetName() + "!$E2)";
        CellReference countCellReference = new CellReference(pivotSheet.getSheetName(), 1, categoryFieldIndex, false, false);
        Cell countCell = pivotSheet.getRow(countCellReference.getRow()).getCell(countCellReference.getCol());
        countCell.setCellFormula(countFormula);

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.util.AreaReference;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFPivotTable;
import org.openxmlformats.schemas.spreadsheetml.x2006.main.STDataConsolidateFunction;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        String sourceDataRef = sheet.getSheetName() + "!$A$1:$E$" + (lastRowIndex + 1);

        Sheet pivotSheet = workbook.createSheet("Pivot");
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(new AreaReference(sourceDataRef), new CellReference("A1"), sheet);

        // Set the pivot table fields
        int categoryColumnIndex = 4; // Modify as per your actual column index

        // Add the "Category" column as row label
        pivotTable.addRowLabel(categoryColumnIndex);

        // Set the aggregation function for the "Category" column to COUNT
        CTDataField dataField = pivotTable.getCTPivotTableDefinition().getDataFields().getDataFieldArray(0);
        dataField.setFunction(STDataConsolidateFunction.COUNT);
        dataField.setFunctionId(STDataConsolidateFunction.Enum.forInt(STDataConsolidateFunction.INT_COUNT));

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}


dataField.setFunctionId(STDataConsolidateFunction.Enum.forInt(STDataConsolidateFunction.INT_COUNT))

int categoryFieldIndex = pivotTable.addRowLabel(categoryColumnIndex);

        // Set the aggregation function for the "Category" column to COUNT
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryFieldIndex).setDataField(true);
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryFieldIndex).setFunction(DataConsolidateFunction.COUNT.getFunctionIndex())


CTDataField dataField1 = pivotTable.getCTPivotTableDefinition().getDataFields().getDataFieldArray(valueFieldIndex1);
        dataField1.setName("Sum
    // Add the "Category" column as a data field with count function
        int categoryDataFieldIndex = pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryColumnIndex).getDataField();
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryColumnIndex).setFunction(org.openxmlformats.schemas.spreadsheetml.x2006.main.STDataConsolidateFunction.COUNT);

        // Add a value field with count function
        int valueFieldIndex = pivotTable.addColumnLabel(DataConsolidateFunction.COUNT, categoryColumnIndex);
        pivotTable.getDataField(valueFieldIndex).setNumFmtId(0);
int categoryDataFieldIndex = pivotTable.getDataFields().size();
        CTDataField categoryDataField = pivotTable.getCTPivotTableDefinition().addNewDataField();
        categoryDataField.setName("Category");
        categoryDataField.setShowDataAs(STDataConsolidateFunction.COUNT);
        categoryDataField.setBaseField(categoryColumnIndex);
        categoryDataField.setBaseItem(0);

        // Set the value field settings
        categoryDataField.setNumFmtId(0);




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotField;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Regular expressions to match and their corresponding update values
        List<String> regexPatterns = Arrays.asList(
                "jobfailure",
                "jobtermination",
                "maxretry"
        );
        List<String> updateValues = Arrays.asList(
                "Job Failure",
                "Job Termination",
                "Max Retry"
        );
        String defaultUpdateValue = "Others";

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            int rowIndex = row.getRowNum();
            if (rowIndex == 0) {
                // Skip the first row (header)
                continue;
            }

            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null) {
                String shortDescValue = shortDescCell.getStringCellValue().toLowerCase();
                String updateValue = defaultUpdateValue;

                for (int i = 0; i < regexPatterns.size(); i++) {
                    String regexPattern = regexPatterns.get(i);
                    Pattern pattern = Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
                    Matcher matcher = pattern.matcher(shortDescValue);

                    if (matcher.find()) {
                        updateValue = updateValues.get(i);
                        break;
                    }
                }

                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue(updateValue);
            }
        }

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        CellRangeAddress sourceData = new CellRangeAddress(0, lastRowIndex, 0, lastColumnIndex);
        String pivotTableName = "PivotTable";
        String pivotTableLocation = "F1"; // Change the location as per your preference

        Sheet pivotSheet = workbook.createSheet("Pivot");
        CellReference pivotTableReference = new CellReference(pivotSheet.getSheetName(), pivotTableLocation);
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(sourceData, pivotTableReference, sheet);

        // Set the pivot table fields
        pivotTable.addRowLabel(categoryColumnIndex);

        // Add the "Category" column as a data field with count function
        int categoryDataFieldIndex = pivotTable.getCTPivotTableDefinition().getPivotFields().sizeOfPivotFieldArray();
        CTPivotField categoryDataField = pivotTable.getCTPivotTableDefinition().insertNewDataField(categoryDataFieldIndex);
        categoryDataField.setShowDataAs(STShowDataAs.COUNT);

        // Set the value field settings
        categoryDataField.setNumFmtId(0);

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotField;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Regular expressions to match and their corresponding update values
        List<String> regexPatterns = Arrays.asList(
                "jobfailure",
                "jobtermination",
                "maxretry"
        );
        List<String> updateValues = Arrays.asList(
                "Job Failure",
                "Job Termination",
                "Max Retry"
        );
        String defaultUpdateValue = "Others";

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            int rowIndex = row.getRowNum();
            if (rowIndex == 0) {
                // Skip the first row (header)
                continue;
            }

            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null) {
                String shortDescValue = shortDescCell.getStringCellValue().toLowerCase();
                String updateValue = defaultUpdateValue;

                for (int i = 0; i < regexPatterns.size(); i++) {
                    String regexPattern = regexPatterns.get(i);
                    Pattern pattern = Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
                    Matcher matcher = pattern.matcher(shortDescValue);

                    if (matcher.find()) {
                        updateValue = updateValues.get(i);
                        break;
                    }
                }

                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue(updateValue);
            }
        }

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        CellRangeAddress sourceData = new CellRangeAddress(0, lastRowIndex, 0, lastColumnIndex);
        String pivotTableName = "PivotTable";
        String pivotTableLocation = "F1"; // Change the location as per your preference

        Sheet pivotSheet = workbook.createSheet("Pivot");
        CellReference pivotTableReference = new CellReference(pivotSheet.getSheetName(), pivotTableLocation);
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(sourceData, pivotTableReference, sheet);

        // Set the pivot table fields
        pivotTable.addRowLabel(categoryColumnIndex);

        // Add the "Category" column as a data field with count function
        int categoryDataFieldIndex = pivotTable.getCTPivotTableDefinition().getPivotFields().sizeOfPivotFieldArray();
        CTPivotField categoryDataField = pivotTable.getCTPivotTableDefinition().insertNewDataField(categoryDataFieldIndex);
        categoryDataField.setShowDataAs(STShowDataAs.COUNT);

        // Set the value field settings
        categoryDataField.setNumFmtId(0);


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Regular expressions to match and their corresponding update values
        List<String> regexPatterns = Arrays.asList(
                "jobfailure",
                "jobtermination",
                "maxretry"
        );
        List<String> updateValues = Arrays.asList(
                "Job Failure",
                "Job Termination",
                "Max Retry"
        );
        String defaultUpdateValue = "Others";

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            int rowIndex = row.getRowNum();
            if (rowIndex == 0) {
                // Skip the first row (header)
                continue;
            }

            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null) {
                String shortDescValue = shortDescCell.getStringCellValue().toLowerCase();
                String updateValue = defaultUpdateValue;

                for (int i = 0; i < regexPatterns.size(); i++) {
                    String regexPattern = regexPatterns.get(i);
                    Pattern pattern = Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
                    Matcher matcher = pattern.matcher(shortDescValue);

                    if (matcher.find()) {
                        updateValue = updateValues.get(i);
                        break;
                    }
                }

                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue(updateValue);
            }
        }

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        CellRangeAddress sourceData = new CellRangeAddress(0, lastRowIndex, 0, lastColumnIndex);
        String pivotTableName = "PivotTable";
        String pivotTableLocation = "F1"; // Change the location as per your preference

        Sheet pivotSheet = workbook.createSheet("Pivot");
        CellReference pivotTableReference = new CellReference(pivotSheet.getSheetName(), pivotTableLocation);
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(sourceData, pivotTableReference, sheet);

        // Set the pivot table fields
        pivotTable.addRowLabel(categoryColumnIndex);
        int categoryValueFieldIndex = pivotTable.addColumnLabel(DataConsolidateFunction.COUNT, categoryColumnIndex);

        // Set the value field settings
        pivotTable.getPivotField(categoryValueFieldIndex).setNumFmtId(0);

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}
