import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.util.AreaReference;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFPivotTable;
import org.openxmlformats.schemas.spreadsheetml.x2006.main.STDataConsolidateFunction;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        String sourceDataRef = sheet.getSheetName() + "!$A$1:$E$" + (lastRowIndex + 1);

        Sheet pivotSheet = workbook.createSheet("Pivot");
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(new AreaReference(sourceDataRef), new CellReference("A1"), sheet);

        // Set the pivot table fields
        int categoryColumnIndex = 4; // Modify as per your actual column index

        // Add the "Category" column as row label
        pivotTable.addRowLabel(categoryColumnIndex);

        // Set the aggregation function for the "Category" column to COUNT
        CTDataField dataField = pivotTable.getCTPivotTableDefinition().getDataFields().getDataFieldArray(0);
        dataField.setFunction(STDataConsolidateFunction.COUNT);
        dataField.setFunctionId(STDataConsolidateFunction.Enum.forInt(STDataConsolidateFunction.INT_COUNT));

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}


dataField.setFunctionId(STDataConsolidateFunction.Enum.forInt(STDataConsolidateFunction.INT_COUNT))

int categoryFieldIndex = pivotTable.addRowLabel(categoryColumnIndex);

        // Set the aggregation function for the "Category" column to COUNT
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryFieldIndex).setDataField(true);
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryFieldIndex).setFunction(DataConsolidateFunction.COUNT.getFunctionIndex())


CTDataField dataField1 = pivotTable.getCTPivotTableDefinition().getDataFields().getDataFieldArray(valueFieldIndex1);
        dataField1.setName("Sum
    // Add the "Category" column as a data field with count function
        int categoryDataFieldIndex = pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryColumnIndex).getDataField();
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(categoryColumnIndex).setFunction(org.openxmlformats.schemas.spreadsheetml.x2006.main.STDataConsolidateFunction.COUNT);

        // Add a value field with count function
        int valueFieldIndex = pivotTable.addColumnLabel(DataConsolidateFunction.COUNT, categoryColumnIndex);
        pivotTable.getDataField(valueFieldIndex).setNumFmtId(0);
int categoryDataFieldIndex = pivotTable.getDataFields().size();
        CTDataField categoryDataField = pivotTable.getCTPivotTableDefinition().addNewDataField();
        categoryDataField.setName("Category");
        categoryDataField.setShowDataAs(STDataConsolidateFunction.COUNT);
        categoryDataField.setBaseField(categoryColumnIndex);
        categoryDataField.setBaseItem(0);

        // Set the value field settings
        categoryDataField.setNumFmtId(0);




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotField;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Regular expressions to match and their corresponding update values
        List<String> regexPatterns = Arrays.asList(
                "jobfailure",
                "jobtermination",
                "maxretry"
        );
        List<String> updateValues = Arrays.asList(
                "Job Failure",
                "Job Termination",
                "Max Retry"
        );
        String defaultUpdateValue = "Others";

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            int rowIndex = row.getRowNum();
            if (rowIndex == 0) {
                // Skip the first row (header)
                continue;
            }

            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null) {
                String shortDescValue = shortDescCell.getStringCellValue().toLowerCase();
                String updateValue = defaultUpdateValue;

                for (int i = 0; i < regexPatterns.size(); i++) {
                    String regexPattern = regexPatterns.get(i);
                    Pattern pattern = Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
                    Matcher matcher = pattern.matcher(shortDescValue);

                    if (matcher.find()) {
                        updateValue = updateValues.get(i);
                        break;
                    }
                }

                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue(updateValue);
            }
        }

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        CellRangeAddress sourceData = new CellRangeAddress(0, lastRowIndex, 0, lastColumnIndex);
        String pivotTableName = "PivotTable";
        String pivotTableLocation = "F1"; // Change the location as per your preference

        Sheet pivotSheet = workbook.createSheet("Pivot");
        CellReference pivotTableReference = new CellReference(pivotSheet.getSheetName(), pivotTableLocation);
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(sourceData, pivotTableReference, sheet);

        // Set the pivot table fields
        pivotTable.addRowLabel(categoryColumnIndex);

        // Add the "Category" column as a data field with count function
        int categoryDataFieldIndex = pivotTable.getCTPivotTableDefinition().getPivotFields().sizeOfPivotFieldArray();
        CTPivotField categoryDataField = pivotTable.getCTPivotTableDefinition().insertNewDataField(categoryDataFieldIndex);
        categoryDataField.setShowDataAs(STShowDataAs.COUNT);

        // Set the value field settings
        categoryDataField.setNumFmtId(0);

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotField;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Regular expressions to match and their corresponding update values
        List<String> regexPatterns = Arrays.asList(
                "jobfailure",
                "jobtermination",
                "maxretry"
        );
        List<String> updateValues = Arrays.asList(
                "Job Failure",
                "Job Termination",
                "Max Retry"
        );
        String defaultUpdateValue = "Others";

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            int rowIndex = row.getRowNum();
            if (rowIndex == 0) {
                // Skip the first row (header)
                continue;
            }

            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null) {
                String shortDescValue = shortDescCell.getStringCellValue().toLowerCase();
                String updateValue = defaultUpdateValue;

                for (int i = 0; i < regexPatterns.size(); i++) {
                    String regexPattern = regexPatterns.get(i);
                    Pattern pattern = Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
                    Matcher matcher = pattern.matcher(shortDescValue);

                    if (matcher.find()) {
                        updateValue = updateValues.get(i);
                        break;
                    }
                }

                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue(updateValue);
            }
        }

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        CellRangeAddress sourceData = new CellRangeAddress(0, lastRowIndex, 0, lastColumnIndex);
        String pivotTableName = "PivotTable";
        String pivotTableLocation = "F1"; // Change the location as per your preference

        Sheet pivotSheet = workbook.createSheet("Pivot");
        CellReference pivotTableReference = new CellReference(pivotSheet.getSheetName(), pivotTableLocation);
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(sourceData, pivotTableReference, sheet);

        // Set the pivot table fields
        pivotTable.addRowLabel(categoryColumnIndex);

        // Add the "Category" column as a data field with count function
        int categoryDataFieldIndex = pivotTable.getCTPivotTableDefinition().getPivotFields().sizeOfPivotFieldArray();
        CTPivotField categoryDataField = pivotTable.getCTPivotTableDefinition().insertNewDataField(categoryDataFieldIndex);
        categoryDataField.setShowDataAs(STShowDataAs.COUNT);

        // Set the value field settings
        categoryDataField.setNumFmtId(0);


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Regular expressions to match and their corresponding update values
        List<String> regexPatterns = Arrays.asList(
                "jobfailure",
                "jobtermination",
                "maxretry"
        );
        List<String> updateValues = Arrays.asList(
                "Job Failure",
                "Job Termination",
                "Max Retry"
        );
        String defaultUpdateValue = "Others";

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            int rowIndex = row.getRowNum();
            if (rowIndex == 0) {
                // Skip the first row (header)
                continue;
            }

            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null) {
                String shortDescValue = shortDescCell.getStringCellValue().toLowerCase();
                String updateValue = defaultUpdateValue;

                for (int i = 0; i < regexPatterns.size(); i++) {
                    String regexPattern = regexPatterns.get(i);
                    Pattern pattern = Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE);
                    Matcher matcher = pattern.matcher(shortDescValue);

                    if (matcher.find()) {
                        updateValue = updateValues.get(i);
                        break;
                    }
                }

                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue(updateValue);
            }
        }

        // Create a pivot table
        int lastRowIndex = sheet.getLastRowNum();
        int lastColumnIndex = sheet.getRow(0).getLastCellNum() - 1;
        CellRangeAddress sourceData = new CellRangeAddress(0, lastRowIndex, 0, lastColumnIndex);
        String pivotTableName = "PivotTable";
        String pivotTableLocation = "F1"; // Change the location as per your preference

        Sheet pivotSheet = workbook.createSheet("Pivot");
        CellReference pivotTableReference = new CellReference(pivotSheet.getSheetName(), pivotTableLocation);
        XSSFPivotTable pivotTable = ((XSSFSheet) pivotSheet).createPivotTable(sourceData, pivotTableReference, sheet);

        // Set the pivot table fields
        pivotTable.addRowLabel(categoryColumnIndex);
        int categoryValueFieldIndex = pivotTable.addColumnLabel(DataConsolidateFunction.COUNT, categoryColumnIndex);

        // Set the value field settings
        pivotTable.getPivotField(categoryValueFieldIndex).setNumFmtId(0);

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}
