
// Create a Pivot Table
        int startRow = 0;
        int startColumn = 0;
        int endRow = sheet.getLastRowNum();
        int endColumn = 4; // Adjust this based on the number of columns in your data

        // Create a new sheet for the Pivot Table
        Sheet pivotSheet = workbook.createSheet("Pivot Table");

        // Copy the data to the Pivot Table sheet
        for (int r = startRow; r <= endRow; r++) {
            Row sourceRow = sheet.getRow(r);
            Row targetRow = pivotSheet.createRow(r);

            for (int c = startColumn; c <= endColumn; c++) {
                Cell sourceCell = sourceRow.getCell(c);
                Cell targetCell = targetRow.createCell(c);

                if (sourceCell != null) {
                    CellType cellType = sourceCell.getCellType();
                    targetCell.setCellType(cellType);

                    switch (cellType) {
                        case STRING:
                            targetCell.setCellValue(sourceCell.getStringCellValue());
                            break;
                        case NUMERIC:
                            targetCell.setCellValue(sourceCell.getNumericCellValue());
                            break;
                        // Add more cases as needed for different cell types
                    }
                }
            }
        }
// Create the Pivot Table
        int firstDataRowIndex = startRow + 1;
        int lastDataRowIndex = endRow;
        int firstDataColumnIndex = startColumn;
        int lastDataColumnIndex = endColumn;

        int pivotTableStartRow = 0;
        int pivotTableStartColumn = 0;
        int pivotTableEndRow = 2; // Adjust this based on the desired layout of the Pivot Table
        int pivotTableEndColumn = 2; // Adjust this based on the desired layout of the Pivot Table

        // Create the Pivot Table
        PivotTable pivotTable = pivotSheet.createPivotTable(
                new CellReference(pivotTableStartRow, pivotTableStartColumn),
                new AreaReference(
                        firstDataRowIndex, firstDataColumnIndex, lastDataRowIndex, lastDataColumnIndex,
                        workbook.getSpreadsheetVersion()
                ),
                sheet
        );

        // Set the Pivot Table field configurations
        pivotTable.addRowLabel(categoryColumnIndex);
        pivotTable.addColumnLabel(DataConsolidateFunction.COUNT, shortDescColumnIndex);
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(0).setAxis(STAxis.AXIS_COL);
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(0).addNewItems();
        pivotTable.getCTPivotTableDefinition().getPivotFields().getPivotFieldArray(0).getItems().addNewItem().setT(STItemType.DEFAULT);

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}








import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Open the Excel workbook
        FileInputStream fis = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column indexes (0-based)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Apply the filter to the "Short Description" column
        String filterValue = "job failure";
        AutoFilter filter = sheet.setAutoFilter(new CellRangeAddress(0, sheet.getLastRowNum(), shortDescColumnIndex, shortDescColumnIndex));

        // Iterate over the rows and update values in the "E" column
        for (Row row : sheet) {
            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null && shortDescCell.getStringCellValue().equalsIgnoreCase(filterValue)) {
                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue("Job Failure");
            }
        }

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}


import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.annotation.ExcelProperty;
import com.alibaba.excel.write.metadata.style.WriteCellStyle;
import com.alibaba.excel.write.style.HorizontalCellStyleStrategy;

import java.util.ArrayList;
import java.util.List;

public class ExcelFilterExample {
    public static void main(String[] args) {
        String excelFilePath = "path/to/your/excel/file.xlsx";

        // Read the Excel file
        List<ExcelData> excelDataList = EasyExcel.read(excelFilePath)
                .head(ExcelData.class)
                .sheet()
                .doReadSync();

        // Apply the filter and update values
        String filterValue = "job failure";
        for (ExcelData data : excelDataList) {
            if (data.getShortDescription().equalsIgnoreCase(filterValue)) {
                data.setCategory("Job Failure");
            }
        }

        // Write the modified data back to the Excel file
        EasyExcel.write(excelFilePath, ExcelData.class)
                .sheet()
                .doWrite(excelDataList);
    }

    public static class ExcelData {
        @ExcelProperty(index = 0)
        private String shortDescription;

        @ExcelProperty(index = 1)
        private String category;

        // Getters and setters

        public String getShortDescription() {
            return shortDescription;
        }

        public void setShortDescription(String shortDescription) {
            this.shortDescription = shortDescription;
        }

        public String getCategory() {
            return category;
        }

        public void setCategory(String category) {
            this.category = category;
        }
    }
}



int rowCount = 0;
for (Row row : firstSheet) {
    Row newRow = secondSheet.createRow(rowCount);
    int cellCount = 0;
    for (String columnName : columnsToCopy) {
        int colIndex = getColumnIndex(firstSheet, columnName);
        if (colIndex != -1) {
            Cell cell = row.getCell(colIndex, MissingCellPolicy.RETURN_BLANK_AS_NULL);
            if (cell != null) {
                Cell newCell = newRow.createCell(cellCount);
                newCell.setCellValue(cell.getStringCellValue()); // Assuming the cells contain string values
            }
        }
        cellCount++;
    }
    rowCount++;
}


private static int getColumnIndex(Sheet sheet, String columnName) {
    Row firstRow = sheet.getRow(0); // Assuming column names are in the first row
    for (Cell cell : firstRow) {
        if (columnName.equals(cell.getStringCellValue())) {
            return cell.getColumnIndex();
        }
    }
    return -1; // Column name not found
}
import org.apache.poi.ss.usermodel.*;

import java.io.*;

public class ExcelFilterExample {

    public static void main(String[] args) {
        try {
            // Load the Excel workbook
            Workbook workbook = WorkbookFactory.create(new File("path/to/your/workbook.xlsx"));

            // Get the sheet
            Sheet sheet = workbook.getSheet("Sheet1"); // Replace "Sheet1" with your sheet name

            // Rename column E as "Category"
            Row headerRow = sheet.getRow(0);
            Cell categoryCell = headerRow.createCell(4);
            categoryCell.setCellValue("Category");

            // Apply text filter on column D (Short Description) and fill Category column (column E)
            AutoFilter filter = sheet.getAutoFilter();
            filter.setColumnFilterCriteria(3, FilterOperator.EQUAL, "failure"); // 3 represents column D (index starts from 0)

            int lastRowNum = sheet.getLastRowNum();
            for (int rowNum = 1; rowNum <= lastRowNum; rowNum++) {
                Row row = sheet.getRow(rowNum);
                Cell descriptionCell = row.getCell(3); // Cell in column D
                String descriptionValue = descriptionCell.getStringCellValue();
                if (descriptionValue.equalsIgnoreCase("failure")) {
                    Cell categoryCellForRow = row.createCell(4); // Cell in column E
                    categoryCellForRow.setCellValue("failure");
                }
            }

            // Save the workbook
            FileOutputStream fileOut = new FileOutputStream("path/to/your/filtered_workbook.xlsx");
            workbook.write(fileOut);
            fileOut.close();

            System.out.println("Filter applied successfully!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openxmlformats.schemas.spreadsheetml.x2006.main.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class ExcelFilterExample {
    public static void main(String[] args) throws IOException {
        // Open the Excel workbook
        FileInputStream fis = new FileInputStream("path/to/your/excel/file.xlsx");
        Workbook workbook = new XSSFWorkbook(fis);

        // Access the first sheet in the workbook
        Sheet sheet = workbook.getSheetAt(0);

        // Get the column number (0-based index)
        int shortDescColumnIndex = 3;
        int categoryColumnIndex = 4;

        // Apply the filter and set the filter criteria
        CTAutoFilter autoFilter = sheet.getCTWorksheet().addNewAutoFilter();
        CTFilterColumn filterColumn = autoFilter.addNewFilterColumn();
        filterColumn.setColId(shortDescColumnIndex + 1);

        CTFilter ctFilter = filterColumn.addNewFilters().insertNewFilter(shortDescColumnIndex);
        ctFilter.setVal("job failure");

        // Iterate over the rows and hide rows that don't match the filter criteria
        for (Row row : sheet) {
            Cell shortDescCell = row.getCell(shortDescColumnIndex);

            if (shortDescCell != null && !shortDescCell.getStringCellValue().equalsIgnoreCase("job failure")) {
                if (row.getRowNum() != 0) {
                    ((XSSFRow) row).getCTRow().setHidden(true);
                }
            } else {
                Cell categoryCell = row.createCell(categoryColumnIndex);
                categoryCell.setCellValue("Job Failure");
            }
        }

        // Save the modified workbook
        FileOutputStream fos = new FileOutputStream("path/to/your/excel/file.xlsx");
        workbook.write(fos);

        // Close the resources
        workbook.close();
        fis.close();
        fos.close();
    }
}

